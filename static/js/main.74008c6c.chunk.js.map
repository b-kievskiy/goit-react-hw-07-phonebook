{"version":3,"sources":["redux/actions/contactsAction.js","redux/constants/contactsConst.js","components/PhoneForm/PhoneForm.js","redux/selectors/contacts-selectors.js","components/FindContact/FindContact.js","redux/operations/contactsOperations.js","components/App/App.js","redux/reducers/contactsReducer.js","redux/store.js","index.js"],"names":["getContactsReguest","createAction","getContactsSeccess","getContactsError","addContactsReguest","addContactsSeccess","addContactsError","deleteContactsReguest","deleteContactsSeccess","deleteContactsError","inputValue","e","payload","target","value","PhoneForm","submitForm","name","contactInputValue","number","useState","result","setResult","useEffect","CSSTransition","in","classNames","timeout","mountOnEnter","className","onSubmit","type","onChange","contactsSelector","state","contacts","items","contactsFilterSelector","filter","contactsItemsSelector","getFilteredSelector","createSelector","item","toLowerCase","includes","mapDispatchToProps","deleteContact","id","dispatch","axios","delete","then","catch","error","connect","length","TransitionGroup","component","map","key","onClick","App","setState","preventDefault","props","find","toggle","addContact","status","this","getContact","unmountOnExit","Component","post","response","data","get","console","log","createReducer","contact","combineReducers","defaultMidleware","getDefaultMiddleware","store","configureStore","reducer","rootReducer","middleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.74008c6c.chunk.js","sourcesContent":["import { VALUE } from \"../constants/contactsConst\";\nimport { createAction } from \"@reduxjs/toolkit\";\n\nexport const getContactsReguest = createAction(\"@contacts/getReguest\");\nexport const getContactsSeccess = createAction(\"@contacts/getReguestSeccess\");\nexport const getContactsError = createAction(\"@contacts/getReguestError\");\n// ==================================================================\nexport const addContactsReguest = createAction(\"@contacts/addReguest\");\nexport const addContactsSeccess = createAction(\"@contacts/addReguestSeccess\");\nexport const addContactsError = createAction(\"@contacts/addReguestError\");\n// ==================================================================\nexport const deleteContactsReguest = createAction(\"@contacts/deleteReguest\");\nexport const deleteContactsSeccess = createAction(\n  \"@contacts/deleteReguestSeccess\"\n);\nexport const deleteContactsError = createAction(\"@contacts/deleteReguestError\");\n// ==================================================================\nexport const inputValue = createAction(VALUE, (e) => ({\n  payload: e.target.value,\n}));\n","export const LOCAL = \"@contacts/localstorage\";\nexport const ADD = \"@contacts/add\";\nexport const DELETE = \"@contacts/delete\";\nexport const VALUE = \"@contacts/value\";\n","import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { CSSTransition } from \"react-transition-group\";\nimport \"./PhoneForm.css\";\n\nconst PhoneForm = ({ submitForm, name, contactInputValue, number }) => {\n  const [result, setResult] = useState(false);\n\n  useEffect(() => {\n    setResult(true);\n  }, []);\n\n  return (\n    <>\n      <CSSTransition in={result} classNames=\"title\" timeout={500} mountOnEnter>\n        <h2 className=\"title\">Phonebook</h2>\n      </CSSTransition>\n\n      <form className=\"form\" onSubmit={submitForm}>\n        <span>Name</span>\n        <br></br>\n        <input\n          className=\"input_name\"\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={contactInputValue}\n        ></input>\n        <br></br>\n        <span>Number</span>\n        <br></br>\n        <input\n          className=\"input_number\"\n          type=\"text\"\n          name=\"number\"\n          value={number}\n          onChange={contactInputValue}\n        ></input>\n        <br></br>\n        <button className=\"submit_btn\" type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    </>\n  );\n};\n\nexport default PhoneForm;\n\nPhoneForm.propTypes = {\n  submitForm: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  contactInputValue: PropTypes.func.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const contactsSelector = (state) => state.contacts.items;\n\nexport const contactsFilterSelector = (state) => state.contacts.filter;\nexport const contactsItemsSelector = (state) => state.contacts.items;\n\nexport const getFilteredSelector = createSelector(\n  [contactsSelector, contactsFilterSelector],\n  (contacts, filter) => {\n    return contacts.filter((item) =>\n      item.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n\n// export const getFilteredSelector = (state) => {\n//   const contacts = contactsSelector(state);\n//   const filter = contactsFilterSelector(state).toLowerCase();\n\n//   return contacts.filter((item) => item.name.toLowerCase().includes(filter));\n// };\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { connect } from \"react-redux\";\nimport \"../FindContact/FindContact.css\";\nimport { inputValue } from \"../../redux/actions/contactsAction\";\nimport { deleteContact } from \"../../redux/operations/contactsOperations\";\nimport {\n  contactsFilterSelector,\n  contactsItemsSelector,\n  getFilteredSelector,\n} from \"../../redux/selectors/contacts-selectors\";\n\nconst FindContact = ({ inputValue, deleteContact, result }) => {\n  return (\n    <>\n      {result.length > 1 && (\n        <div className=\"search-container\">\n          <span>Find contacts by name</span>\n          <br></br>\n          <input type=\"text\" onChange={inputValue}></input>\n        </div>\n      )}\n      <div className=\"search_info\">\n        <TransitionGroup component=\"ul\" className=\"contact_list\">\n          {result.map((item) => (\n            <CSSTransition key={item.id} classNames=\"list__item\" timeout={800}>\n              <li className=\"contact_item\" key={item.id}>\n                {item.name} : {item.number}\n                <button\n                  className=\"delete_btn\"\n                  type=\"button\"\n                  onClick={() => deleteContact(item.id)}\n                >\n                  Delete\n                </button>\n              </li>\n            </CSSTransition>\n          ))}\n        </TransitionGroup>\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  filter: contactsFilterSelector(state),\n  contacts: contactsItemsSelector(state),\n  result: getFilteredSelector(state),\n});\n\nconst mapDispatchToProps = {\n  inputValue,\n  deleteContact,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FindContact);\n\nFindContact.propTypes = {\n  deleteContact: PropTypes.func.isRequired,\n};\n","import axios from \"axios\";\nimport {\n  addContactsReguest,\n  addContactsSeccess,\n  addContactsError,\n  getContactsReguest,\n  getContactsSeccess,\n  getContactsError,\n  deleteContactsReguest,\n  deleteContactsSeccess,\n  deleteContactsError,\n} from \"../actions/contactsAction\";\n\nexport const addContact = (name, number) => (dispatch) => {\n  dispatch(addContactsReguest());\n  axios\n    .post(\"http://localhost:3000/contacts\", { name, number })\n    .then((response) => {\n      dispatch(addContactsSeccess(response.data));\n    })\n    .catch((error) => dispatch(addContactsError(error)));\n};\n\nexport const getContact = () => (dispatch) => {\n  dispatch(getContactsReguest());\n  axios\n    .get(\"http://localhost:5000/contacts\")\n    .then((response) => {\n      console.log(response);\n      dispatch(getContactsSeccess(response.data));\n    })\n    .catch((error) => dispatch(getContactsError(error)));\n};\n\nexport const deleteContact = (id) => (dispatch) => {\n  dispatch(deleteContactsReguest());\n  axios\n    .delete(`http://localhost:5000/contacts/${id}`)\n    .then(() => {\n      dispatch(deleteContactsSeccess(id));\n    })\n    .catch((error) => dispatch(deleteContactsError(error)));\n};\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  addContact,\n  getContact,\n} from \"../../redux/operations/contactsOperations\";\nimport PfoneForm from \"../PhoneForm/PhoneForm\";\nimport FindContact from \"../FindContact/FindContact\";\nimport { CSSTransition } from \"react-transition-group\";\nimport \"./App.css\";\nimport { contactsSelector } from \"../../redux/selectors/contacts-selectors\";\n\nclass App extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n    value: false,\n  };\n\n  contactInputValue = ({ target }) => {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  submitForm = (e) => {\n    e.preventDefault();\n    const { name, number, value } = this.state;\n    if (this.props.contacts.find((item) => item.name === this.state.name)) {\n      this.toggle(value);\n      return;\n    }\n\n    this.props.addContact(name, number);\n\n    this.setState({\n      name: \"\",\n      number: \"\",\n    });\n  };\n\n  toggle = (status) => {\n    this.setState({\n      value: !status,\n    });\n  };\n\n  componentDidMount() {\n    this.props.getContact();\n  }\n\n  render() {\n    const { name, number, value } = this.state;\n    const test = () => {\n      this.toggle(true);\n    };\n\n    return (\n      <>\n        <CSSTransition\n          in={value}\n          classNames=\"alert\"\n          timeout={500}\n          mountOnEnter\n          unmountOnExit\n        >\n          <button\n            className=\"alert\"\n            onClick={test}\n          >{`${name} alredy exist`}</button>\n        </CSSTransition>\n\n        <PfoneForm\n          submitForm={this.submitForm}\n          name={name}\n          contactInputValue={this.contactInputValue}\n          number={number}\n        />\n        <FindContact />\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  contacts: contactsSelector(state),\n});\n\nconst mapDispatchToProps = {\n  addContact,\n  getContact,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { combineReducers } from \"redux\";\nimport { createReducer } from \"@reduxjs/toolkit\";\nimport {\n  addContactsSeccess,\n  getContactsSeccess,\n  deleteContactsSeccess,\n  inputValue,\n} from \"../actions/contactsAction\";\n\nconst items = createReducer([], {\n  [getContactsSeccess]: (state, { payload }) => payload,\n  [addContactsSeccess]: (state, { payload }) => [...state, payload],\n  [deleteContactsSeccess]: (state, { payload }) =>\n    state.filter((contact) => contact.id !== payload),\n});\n\nconst filter = createReducer(\"\", {\n  [inputValue]: (state, { payload }) => (state = payload),\n});\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","// import { createStore, combineReducers } from \"redux\";\nimport { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\n// import { composeWithDevTools } from \"redux-devtools-extension\";\nimport rootReducer from \"./reducers/contactsReducer\";\n// import logger from \"redux-logger\";\n\n// const rootReducer = combineReducers({\n//   contacts: contactsReducer,\n// });\n\n// const store = createStore(rootReducer, composeWithDevTools());\n\nconst defaultMidleware = getDefaultMiddleware();\n\nconst store = configureStore({\n  reducer: {\n    contacts: rootReducer,\n  },\n  middleware: [...defaultMidleware],\n});\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./components/App/App\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}